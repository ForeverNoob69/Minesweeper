import random
import re
class Board:
    def __init__(self,dim_size,num_bombs):
        self.dim_size=dim_size
        self.num_bombs=num_bombs
        self.dug = set()
        self.board = self.make_new_board()
        self.assing_values_to_board()
    def make_new_board(self):
        board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
        bombs_planted = 0
        while bombs_planted<self.num_bombs:
            loc = random.randint(0,(self.dim_size**2)-1)
            row = loc//self.dim_size
            column = loc%self.dim_size
            if board[row][column]=="*":
                continue
            board[row][column]="*"
            bombs_planted+=1
        return board
    def assing_values_to_board(self):
        neighboring_num_bombs = 0
        for row in range(self.dim_size):
            for column in range(self.dim_size):
                if self.board[row][column] == "*":
                    continue
                self.board[row][column]=self.get_neighboring_values(row,column)
    def get_neighboring_values(self,r,c):
        neighbor_bombs = 0
        for row in range(max(0,r-1),min(r+1,self.dim_size-1)+1):
            for column in range(max(0,c-1),min(c+1,self.dim_size-1)+1):
                if row==r and column==c:
                    continue
                if self.board[row][column]=="*":
                    neighbor_bombs+=1
        return neighbor_bombs
    def dig(self,row,column):
        self.dug.add((row,column))
        if self.board[row][column]=="*":
            return False
        if self.board[row][column]>0:
            return True
        for r in range(max(0,row-1),min(row+1,self.dim_size-1)+1):
            for c in range(max(0,column-1),min(column+1,self.dim_size-1)+1):
                if(r,c) in self.dug:
                    continue
                self.dig(r,c)
        return True
    def __str__(self):
        # this is a magic function where if you call print on this object,
        # it'll print out what this function returns!
        # return a string that shows the board to the player

        # first let's create a new array that represents what the user would see
        visible_board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
        for row in range(self.dim_size):
            for col in range(self.dim_size):
                if (row,col) in self.dug:
                    visible_board[row][col] = str(self.board[row][col])
                else:
                    visible_board[row][col] = ' '
        
        # put this together in a string
        string_rep = ''
        # get max column widths for printing
        widths = []
        for idx in range(self.dim_size):
            columns = map(lambda x: x[idx], visible_board)
            widths.append(
                len(
                    max(columns, key = len)
                )
            )

        # print the csv strings
        indices = [i for i in range(self.dim_size)]
        indices_row = '   '
        cells = []
        for idx, col in enumerate(indices):
            format = '%-' + str(widths[idx]) + "s"
            cells.append(format % (col))
        indices_row += '  '.join(cells)
        indices_row += '  \n'
        
        for i in range(len(visible_board)):
            row = visible_board[i]
            string_rep += f'{i} |'
            cells = []
            for idx, col in enumerate(row):
                format = '%-' + str(widths[idx]) + "s"
                cells.append(format % (col))
            string_rep += ' |'.join(cells)
            string_rep += ' |\n'

        str_len = int(len(string_rep) / self.dim_size)
        string_rep = indices_row + '-'*str_len + '\n' + string_rep + '-'*str_len

        return string_rep
                
                
        
        
def play(dim_size=10,num_bombs=10):
    # Step 1: create the board and plant the bombs
    # Step 2: show the user the board and ask for where they want to dig
    # Step 3a: if location is a bomb, show game over message
    # Step 3b: if location is not a bomb, dig recursively until each square is at least
    #          next to a bomb
    # Step 4: repeat steps 2 and 3a/b until there are no more places to dig -> VICTORY!
    safe = True
    board = Board(dim_size,num_bombs)
    while len(board.dug)<board.dim_size**2-num_bombs:
        print(board)
        user_input = re.split(",(\\s)*",input("where would you like to dig??[row,col]"))
        row,column =  int(user_input[0]),int(user_input[-1])
        if row<0 or row>board.dim_size or column>board.dim_size or column<0:
            print("invalid input")
            continue
        safe = board.dig(row,column)
        if not safe:
            break
    if safe:
        print("congrates, you won")
    else:
        print("you died, see you in hell")
        board.dug = [(r,c) for r in range(board.dim_size) for c in range(board.dim_size)]
        print(board)
if __name__== "__main__":
    play()
